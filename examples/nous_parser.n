let struct_keyword: char*
let enum_keyword: char*
let union_keyword: char*
let let_keyword: char*
let fn_keyword: char*
let const_keyword: char*
let new_keyword: char*
let auto_keyword: char*
let delete_keyword: char*
let sizeof_keyword: char*
let as_keyword: char*
let null_keyword: char*
let true_keyword: char*
let false_keyword: char*
let break_keyword: char*
let continue_keyword: char*
let return_keyword: char*
let if_keyword: char*
let else_keyword: char*
let while_keyword: char*
let do_keyword: char*
let for_keyword: char*
let switch_keyword: char*
let case_keyword: char*
let default_keyword: char*
let variadic_keyword: char*
let extern_keyword: char*
let first_keyword: char*
let last_keyword: char*
let keywords_list: char**

fn intern_keyword(keyword: char*) : char*
{
    let interned := str_intern(keyword) 
    buf_push(keywords_list, interned)
    return interned
}

let keywords_initialized := false

fn init_keywords()
{    
    if (false == keywords_initialized)
    {
        struct_keyword = intern_keyword("struct")
        enum_keyword = intern_keyword("enum")
        union_keyword = intern_keyword("union")   
        let_keyword = intern_keyword("let")
        fn_keyword = intern_keyword("fn")
        sizeof_keyword = intern_keyword("sizeof")
        const_keyword = intern_keyword("const")
        new_keyword = intern_keyword("new")
        auto_keyword = intern_keyword("auto")
        delete_keyword = intern_keyword("delete")
        as_keyword = intern_keyword("as")
        null_keyword = intern_keyword("null")
        true_keyword = intern_keyword("true")
        false_keyword = intern_keyword("false")
        break_keyword = intern_keyword("break")
        continue_keyword = intern_keyword("continue")
        return_keyword = intern_keyword("return")
        if_keyword = intern_keyword("if")
        else_keyword = intern_keyword("else")
        while_keyword = intern_keyword("while")
        do_keyword = intern_keyword("do")
        for_keyword = intern_keyword("for")
        switch_keyword = intern_keyword("switch")
        case_keyword = intern_keyword("case")
        default_keyword = intern_keyword("default")
        variadic_keyword = intern_keyword("variadic")
        extern_keyword = intern_keyword("extern")
    }
    first_keyword = struct_keyword
    last_keyword = extern_keyword
    keywords_initialized  = true
}

fn is_name_keyword(name: char*): bool
{
    let result := (name >= first_keyword && name <= last_keyword)
    return result
}

enum token_kind
{
    TOKEN_EOF,
    TOKEN_NEWLINE, // używany do synchronizacji w wypadku błędu parsowania
    TOKEN_COMMA,
    TOKEN_DOT,
    TOKEN_COLON,
    TOKEN_QUESTION,
    TOKEN_LEFT_PAREN,
    TOKEN_RIGHT_PAREN,
    TOKEN_LEFT_BRACKET, // [
    TOKEN_RIGHT_BRACKET, // ]
    TOKEN_LEFT_BRACE, // {
    TOKEN_RIGHT_BRACE, // }
    TOKEN_NOT, // !
    TOKEN_BITWISE_NOT, // ~

    // variables
    TOKEN_KEYWORD,
    TOKEN_INT,
    TOKEN_FLOAT,
    TOKEN_STRING,
    TOKEN_NAME,

    // multiplicative precedence
    TOKEN_FIRST_MUL_OPERATOR,
    TOKEN_MUL = TOKEN_FIRST_MUL_OPERATOR,
    TOKEN_DIV,
    TOKEN_MOD,
    TOKEN_BITWISE_AND, // &
    TOKEN_LEFT_SHIFT,
    TOKEN_RIGHT_SHIFT,
    TOKEN_LAST_MUL_OPERATOR = TOKEN_RIGHT_SHIFT,

    // additive precedence
    TOKEN_FIRST_ADD_OPERATOR,
    TOKEN_ADD = TOKEN_FIRST_ADD_OPERATOR,
    TOKEN_SUB,
    TOKEN_XOR, // ^
    TOKEN_BITWISE_OR, // |
    TOKEN_LAST_ADD_OPERATOR = TOKEN_BITWISE_OR,

    // comparative precedence
    TOKEN_FIRST_CMP_OPERATOR,
    TOKEN_EQ = TOKEN_FIRST_CMP_OPERATOR, // ==
    TOKEN_NEQ, // !=
    TOKEN_GT, // >
    TOKEN_LT, // <
    TOKEN_GEQ, // >=
    TOKEN_LEQ, // <=
    TOKEN_LAST_CMP_OPERATOR = TOKEN_LEQ,

    TOKEN_AND, // 'and' or &&
    TOKEN_OR, // 'or' or ||

    // assignment operators
    TOKEN_FIRST_ASSIGN_OPERATOR,
    TOKEN_ASSIGN = TOKEN_FIRST_ASSIGN_OPERATOR,
    TOKEN_ADD_ASSIGN,
    TOKEN_SUB_ASSIGN,
    TOKEN_OR_ASSIGN,
    TOKEN_AND_ASSIGN,
    TOKEN_BITWISE_OR_ASSIGN,
    TOKEN_BITWISE_AND_ASSIGN,
    TOKEN_XOR_ASSIGN,
    TOKEN_LEFT_SHIFT_ASSIGN,
    TOKEN_RIGHT_SHIFT_ASSIGN,
    TOKEN_MUL_ASSIGN,
    TOKEN_DIV_ASSIGN,
    TOKEN_MOD_ASSIGN,
    TOKEN_LAST_ASSIGN_OPERATOR = TOKEN_MOD_ASSIGN,

    // inne
    TOKEN_COLON_ASSIGN, // :=
    TOKEN_INC, // ++
    TOKEN_DEC, // --
}

let token_kind_names : char*[] = 
{
    [TOKEN_EOF] = "EOF",
    [TOKEN_NEWLINE] = "NEWLINE",
    [TOKEN_COLON] = ":",
    [TOKEN_LEFT_PAREN] = "(",
    [TOKEN_RIGHT_PAREN] = ")",
    [TOKEN_LEFT_BRACE] = "{",
    [TOKEN_RIGHT_BRACE] = "}",
    [TOKEN_LEFT_BRACKET] = "[",
    [TOKEN_RIGHT_BRACKET] = "]",
    [TOKEN_COMMA] = ",",
    [TOKEN_DOT] = ".",
    [TOKEN_QUESTION] = "?",
    [TOKEN_NOT] = "!",
    [TOKEN_BITWISE_NOT] = "~",

    [TOKEN_KEYWORD] = "keyword",
    [TOKEN_INT] = "int",
    [TOKEN_FLOAT] = "float",
    [TOKEN_STRING] = "string",
    [TOKEN_NAME] = "name",

    [TOKEN_MUL] = "*",
    [TOKEN_DIV] = "/",
    [TOKEN_MOD] = "%",
    [TOKEN_BITWISE_AND] = "&",
    [TOKEN_LEFT_SHIFT] = "<<",
    [TOKEN_RIGHT_SHIFT] = ">>",

    [TOKEN_ADD] = "+",
    [TOKEN_SUB] = "-",
    [TOKEN_BITWISE_OR] = "|",
    [TOKEN_XOR] = "^",

    [TOKEN_EQ] = "==",
    [TOKEN_NEQ] = "!=",
    [TOKEN_LT] = "<",
    [TOKEN_GT] = ">",
    [TOKEN_LEQ] = "<=",
    [TOKEN_GEQ] = ">=",

    [TOKEN_AND] = "&&",
    [TOKEN_OR] = "||",

    [TOKEN_ASSIGN] = "=",
    [TOKEN_ADD_ASSIGN] = "+=",
    [TOKEN_SUB_ASSIGN] = "-=",
    [TOKEN_OR_ASSIGN] = "||=",
    [TOKEN_AND_ASSIGN] = "&&=",
    [TOKEN_BITWISE_OR_ASSIGN] = "|=",
    [TOKEN_BITWISE_AND_ASSIGN] = "&=",
    [TOKEN_XOR_ASSIGN] = "^=",
    [TOKEN_MUL_ASSIGN] = "*=",
    [TOKEN_DIV_ASSIGN] = "/=",
    [TOKEN_MOD_ASSIGN] = "%=",
    [TOKEN_LEFT_SHIFT_ASSIGN] = "<<=",
    [TOKEN_RIGHT_SHIFT_ASSIGN] = ">>=",

    [TOKEN_COLON_ASSIGN] = ":=",
    [TOKEN_INC] = "++",
    [TOKEN_DEC] = "--",
}

struct token
{
    kind: token_kind 
    pos: source_pos 
    start: char*
    end: char*
    union
    {
        val: int 
        name: char*
        string_val: char*
    }
}

fn get_token_kind_name(kind: token_kind): char*
{
    if (kind < sizeof(token_kind_names) / sizeof(*token_kind_names))
    {
        return token_kind_names[kind]
    }
    else
    {
        return 0
    }
}