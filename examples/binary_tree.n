/* 
    This is a binary tree implementation. 
    We construct a simple example tree and then 
    perform some basic operations on it.
*/

struct tree
{
    root: node*
}

struct node
{
    value: int 
    left: node* 
    right: node* 
}

fn main()
{
/*
    We allocate nodes on the stack 
    and assign values to them:
*/
    let a : node = { 1 }
    let b : node = { 2 }
    let c : node = { 3 }
    let d : node = { 4 }
    let e : node = { 5 }
    let f : node = { 6 }
    let g : node = { 7 }
    let h : node = { 8 }

/* 
    We connect nodes to each other by pointers:
*/
    a.left = &b
    a.right = &c
    b.left = &d
    b.right = &e
    d.left = &g
    d.right = &h
    c.right = &f

    let example: tree = { root = &a }

/*
    The constructed tree looks like this:

               a
              / \\
             b   c
            / \\   \\
           d   e   f
          / \\
         g   h

     Or, in terms of values:

               1
              / \\
             2   3
            / \\   \\
           4   5   6
          / \\
         7   8
*/

    let depth := get_tree_depth(&example)
    printf("Tree depth is %d\\n", depth)

    let max_sum: int = get_max_path_sum(&example)
    printf("Largest sum of a path is: %d\\n", max_sum)

    printf("Breadth-first traversal:\\n")
    breadth_first_traversal(&example)

    printf("\\nDepth-first traversal:\\n")
    depth_first_traversal(&example)

    printf("\\nIs %d value present? %s", 3, 
        search_depth_first(&example, 3) ? "Yes" : "No")

    printf("\\nIs %d value present? %s", 0, 
        search_depth_first(&example, 0) ? "Yes" : "No")

    printf("\\nIs %d value present? %s", 7, 
        search_depth_first(&example, 7) ? "Yes" : "No")

    printf("\\nIs %d value present? %s", 10, 
        search_depth_first(&example, 10) ? "Yes" : "No")

    printf("\\nThe original tree:\\n")
    print_tree(&example)

    invert_binary_tree(&example)

    printf("\\nThe inverted tree:\\n")
    print_tree(&example)
}

const MAX_STACK = 1024

let stack : node*[MAX_STACK]
let last_node : node*
let node_count := 1

fn push_node(n: node*)
{
    if (node_count < MAX_STACK)
    {
        node_count++
        last_node = n
    }
}

fn pop_node(): node* 
{
    if (node_count > 0)
    {
        node_count--
        return last_node
    }
    else
    {
        return null
    }
}

fn go_depth_first(n: node*)
{
    printf("%d ", n.value)

    if (n.left)
    {
        go_depth_first(n.left)
    }

    if (n.right)
    {
        go_depth_first(n.right)
    }
}

fn depth_first_traversal(t: tree*)
{    
    go_depth_first(t.root)
}

let cirular_queue : node*[MAX_STACK]
let max_index : int = MAX_STACK - 1
let first_index : int 
let last_index : int 
let element_count : int 

fn push_to_queue(n: node*)
{
    if (element_count < MAX_STACK)
    {
        cirular_queue[last_index] = n
        last_index++
        if (last_index > max_index)
        {
            last_index = 0
        }
        element_count++
    }
}

fn pop_from_queue(): node*
{
    if (element_count <= 0)
    {
        return null
    }

    let result: node* = cirular_queue[first_index]
    element_count--
    first_index++
    if (first_index > max_index)
    {
        first_index = 0
    }
    return result
}

fn breadth_first_next()
{
    let n: node* = pop_from_queue()
    printf("%d ", n.value)
    if (n)
    {
        if (n.left)
        {
            push_to_queue(n.left)
        }
        if (n.right)
        {
            push_to_queue(n.right)
        }
    }
}

fn breadth_first_traversal(t: tree*)
{
    push_to_queue(t.root)
    while (element_count > 0)
    {
        breadth_first_next()
    }
}

fn search_for_value(n: node*, value: int): bool
{
    if (n == null)
    {
        return false
    }
    else if (n.value == value)
    {
        return true
    }
    else if (search_for_value(n.left, value))
    {
        return true
    }
    else if (search_for_value(n.right, value))
    {
        return true
    }
    else
    {
        return false
    }
}

fn search_depth_first(t: tree*, value: int) : bool
{
    return search_for_value(t.root, value)
}

let max_depth: int
let current_depth: int

fn check_depth(n : node*)
{
    current_depth++

    if (n.left)
    {        
        check_depth(n.left)
    }

    if (n.right)
    {
        check_depth(n.right)        
    }

    current_depth--

    if (current_depth > max_depth)
    {
        max_depth = current_depth
    }
}

fn get_tree_depth(t: tree*): int
{
    max_depth = 0
    current_depth = 0

    check_depth(t.root)

    return max_depth
}

let max_path_sum : int
let current_path_sum : int

fn check_path_sum(n: node*)
{
    if (n == null)
    {
        return
    }

    current_path_sum += n.value

    if (n.left)
    {
        check_path_sum(n.left)
    }

    if (n.right)
    {
        check_path_sum(n.right)
    }
    
    if (n.left == null && n.right == null)    
    {
        if (current_path_sum > max_path_sum)
        {
            max_path_sum = current_path_sum
        }
    }

    current_path_sum -= n.value
}

fn get_max_path_sum(t: tree*): int
{
    max_path_sum = 0
    current_path_sum = 0

    check_path_sum(t.root)

    return max_path_sum
}

fn invert_left_right(n: node*)
{
    if (n)
    {
        let temp: node* = n.right
        n.right = n.left
        n.left = temp

        invert_left_right(n.left)
        invert_left_right(n.right)
    }
}

fn invert_binary_tree(t: tree*)
{
    invert_left_right(t.root)
}

fn print_node(n: node*)
{
    printf("( %d ", n.value)
    
    if (n.left)
    {
        print_node(n.left)
    }

    if (n.right)
    {
        print_node(n.right)
    }
    
    printf(")")
}

fn print_tree(t: tree*)
{
    print_node(t.root)
}