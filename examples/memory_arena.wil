/*
    Here is an implementation of a stack allocator. It's very 
    similar to the memory arenas that are part of Wilfrid's standard library.

    This stack allocator allocates memory in big chunks. 
    If all the memory is used, the next chunk is allocated. 
    Using push_stack and pop_stack functions we can create stack frames 
    and clean them easily when they are no longer needed.

    In the example below we initialize a stack with 1kb blocks 
    and push 50kb of data to it in ten stack frames. Then we 
    clean the last five.
*/

fn main()
{
    let markers := new stack_marker[]
    let block_size : ulong = 1024
    let stack := allocate_stack(block_size)
    
    for (let i := 0, i < 100, i++)
    {
        if (i % 10 == 0)
        {
            markers.add(push_stack(stack))        
        }
        
        let size : ulong = size_of_type(data)
        let new_data := push_size(stack, size) as data^
    }

    printf("Total allocated bytes: %llu\\n", get_used_size(stack))
    printf("The number of stack frames: %d\\n", markers.length())

    pop_stack(stack, markers[5])

    printf("Total allocated bytes after popping the stack: %llu\\n", 
        get_used_size(stack))

    delete markers
    free_stack(stack)
}

struct data
{
    contents: char[512]
}

struct stack_allocator
{
    stack_frames: ulong,
    block_count: ulong,
    first_block: stack_block^,
    last_block: stack_block^,
}

struct stack_block
{    
    base_address: char^,
    max_size: ulong,
    used_size: ulong,
    next: stack_block^,
}

fn allocate_stack(block_size: ulong): stack_allocator^
{
    let stack_size : ulong = size_of_type(stack_allocator)
    let stack := allocate(stack_size) as stack_allocator^
    allocate_new_block(stack, block_size)
    return stack
}

fn allocate_new_block(stack: stack_allocator^, size: ulong): stack_block^
{
    let new_block_size = size + size_of_type(stack_block)
    let new_block := allocate(new_block_size) as stack_block^

    new_block.base_address = new_block as char^ + size_of_type(stack_block)
    new_block.max_size = size
    new_block.used_size = 0
   
    if (stack.last_block)
    {
        stack.last_block.next = new_block
        stack.last_block = new_block
    }
    else
    {
        stack.first_block = new_block
        stack.last_block = new_block
    }

    stack.block_count++
    return new_block
}

fn free_stack(stack: stack_allocator^)
{
    if (stack == null)
    {
        return
    }

    let block_to_delete := stack.first_block
    while (block_to_delete)
    {
        let temp := block_to_delete.next
        delete block_to_delete
        block_to_delete = temp
    }

    delete stack
}

fn push_size(stack: stack_allocator^, size: ulong): char^
{
    assert(stack != null)
    assert(size > 0 as ulong)
    assert(size <= stack.last_block.max_size)

    let block := stack.last_block
    if (block.max_size - block.used_size < size)
    {
        block = allocate_new_block(stack, block.max_size)
    }

    let result := block.base_address + block.used_size
    block.used_size += size
    return result
}

struct stack_marker
{
    block: stack_block^,
    address: char^,
}

fn push_stack(stack: stack_allocator^): stack_marker
{
    stack.stack_frames++
    let current_address := stack.last_block.base_address + stack.last_block.used_size
    let result : stack_marker = 
    { 
        block = stack.last_block,
        address = current_address
    }
    return result
}

fn get_total_size(stack: stack_allocator^): ulong
{
    if (stack == null)
    {
        return 0
    }

    let size : ulong = 0
    let block = stack.first_block
    while (block)
    {
        size += block.max_size
        block = block.next
    }
    return size
}

fn get_used_size(stack: stack_allocator^): ulong
{
    if (stack == null)
    {
        return 0
    }

    let size : ulong = 0
    let block = stack.first_block
    while (block)
    {
        size += block.used_size
        block = block.next
    }
    return size
}

fn get_unused_size(stack: stack_allocator^): ulong
{
    return (get_total_size(stack) - get_used_size(stack))
}

fn zero_stack_block(block: stack_block^, from_address: char^)
{
    let block_current_address := block.base_address + block.used_size
    let block_max_address := block.base_address + block.max_size

    zero_memory(from_address, block_current_address)
    block.used_size = (from_address - block.base_address) as ulong
}

fn pop_stack(stack: stack_allocator^, marker: stack_marker)
{    
    assert(stack.stack_frames > 0 as ulong)
    stack.stack_frames--

    if (marker.block == stack.last_block)
    {
        zero_stack_block(marker.block, marker.address)
    }
    else
    {
        zero_stack_block(marker.block, marker.address)

        let block_to_delete = marker.block.next
        while (block_to_delete)
        {
            let temp = block_to_delete.next
            delete block_to_delete
            stack.block_count--
            block_to_delete = temp
        }
        marker.block.next = null
        stack.last_block = marker.block
    }
}