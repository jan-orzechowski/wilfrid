/* 
    Wilfrid supports user-defined types: structs, unions, 
    and enumerations (enums).

    Structs are just collections of fields, allocated 
    in the memory sequentially. Fields can be of any type.
    By default, they are padded to their natural alignment, 
    i.e. 4-byte values are placed on 4-byte boundaries,
    and so on.

    This is a declaration of a struct:
*/

struct thing
{
    first_var : int,
    second_var : long,
    third_var : bool
}

/* 
    Structs can be initialized by passing initial values:
*/ 

let initialized_struct : thing = 
{ 
    first_var = 10, 
    second_var = 1000, 
    third_var = true 
}

/*
    Names can be omitted in initialization. 
    In this case, values are assigned to a struct's fields 
    in the order of their appearance:
*/

let same_as_above : thing = 
{ 
    10, 
    1000, 
    true 
}

/*
    Initialization can be nested:
*/

struct container
{
    val: int,
    thing: thing
}

let nested_struct : container = 
{
    10, { 1, 2, true }    
}

/*
    Fields without provided initialization values are
    always initialized to zero.

    Two notations given below are equivalent:
*/

let zeroed_struct : thing
let other_zeroed_struct : thing = { }

/* 
    Arrays can be initialized similarly:
*/

let initialized_array : int[5] = { 5, 4, 3, 2, 1 }
let zeroed_array : int[10] = { }

/* 
    Unions allow to store different values in the same 
    location in memory. The size of a union is the size 
    of its largest field.

    For example, this union can be interpreted either as 
    a float or a long integer, and has a size of 64 bits.
*/

union other_thing
{
    int_val : int,
    uint_val : uint
}

let union_example : other_thing = { int_val = -6040 }

fn test_union()
{
    printf("The union's field as int: %d\\n", union_example.int_val)
    printf("The union's field as uint: %u\\n", union_example.uint_val)
}

/* 
    We can check an object's size using built-in functions 
    'size_of' and 'size_of_type'. 'size_of' expects 
    a variable instance, and 'size_of_type' expects a type.
*/

let other_thing_size = size_of_type(other_thing)

/* 
    There are also enumerations. Enumerations are just 
    constants that are accessible by name.
    
    Under the hood, enumerations are always 
    of the long integer type.
*/

enum enum_example
{
    VALUE_ONE,
    VALUE_TWO,
    VALUE_THREE
}

/* 
    Unlike in C, enum values are scoped. 
    To use them, we must pass an enum name first.
*/

let enum_value = enum_example.VALUE_TWO

/* 
    We can provide custom values to enum labels.
    Enum values can also depend on each other.
*/

enum other_enum_example
{
    VALUE_ZERO = 0,
    VALUE_TWO = 2,
    VALUE_OTHER_TWO = 2,
    VALUE_OTHER_ZERO = VALUE_ZERO
}

fn main()
{
    test_union()

/*
    Here we allocate two structs on the stack:
*/

    let x : thing = { }
    let y : thing = { 10 }

/* 
    To pass them to this function, we must take their
    addresses using the '@' (at) operator:
*/

    copy_thing(@x, @y)

    printf("Value of first_var field after the copy: %d\\n", x.first_var)
}

fn copy_thing(from: thing^, to: thing^)
{
/*
    When accessing a struct or union fields, pointers to 
    structs are automatically dereferenced.
    
    This means we can use the dot operator no matter whether
    we have struct/union or just a pointer to it.
*/

    to.first_var = from.first_var 
    to.second_var = from.second_var
    to.third_var = from.third_var 

/* 
    The code above could be also written more succinctly 
    by using pointer dereference:
*/
    #to = #from
}