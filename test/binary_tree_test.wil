fn main()
{
    let a : node = { 1 }
    let b : node = { 2 }
    let c : node = { 3 }
    let d : node = { 4 }
    let e : node = { 5 }
    let f : node = { 6 }
    let g : node = { 7 }
    let h : node = { 8 }

    a.left = @b
    a.right = @c
    b.left = @d
    b.right = @e
    d.left = @g
    d.right = @h
    c.right = @f

    let t: tree = { }
    t.root = @a

    /*
               a
              /  \
             b    c
            / \    \
           d   e    f
          / \
         g   h
    */

    push_node(t.root)
    let result: node^ = pop_node()
    assert(result == t.root)

    push_to_queue(@a)
    push_to_queue(@b)
    push_to_queue(@c)
    assert(pop_from_queue() == @a)
    assert(pop_from_queue() == @b)
    assert(pop_from_queue() == @c)

    breadth_first_search(@t)
    
    depth_first_traversal(@t)

    assert(0 != search_for_value(t.root, 7))
    assert(0 == search_for_value(t.root, 9))
    assert(0 == search_for_value(t.root, 0))
    
    let depth: int = get_tree_depth(@t)
    assert(depth == 3)

    let sum: int = get_max_path_sum(@t)

    invert_binary_tree(@t)
}

struct tree
{
    root: node^
}

struct node
{
    value: int 
    left: node^ 
    right: node^ 
}

const MAX_STACK = 1024

let stack : node^[MAX_STACK]
let last_node : node^
let node_count := 1

fn push_node(n: node^)
{
    if (node_count < MAX_STACK)
    {
        node_count++
        last_node = n
    }
}

fn pop_node(): node^ 
{
    if (node_count > 0)
    {
        node_count--
        return last_node
    }
    else
    {
        return null
    }
}

fn _depth_first()
{
    let n : node^ = pop_node()
    if (n)
    {
        if (n.right)
        {
            push_node(n.right)
        }
        if (n.left)
        {
            push_node(n.left)
        }       
    }
}

fn _depth_first_rec(n: node^)
{ 
    if (n.left)
    {
        _depth_first_rec(n.left)
    }
    if (n.right)
    {
        _depth_first_rec(n.right)
    }
}

fn depth_first_traversal(t: tree^)
{    
    push_node(t.root)
    _depth_first_rec(t.root)
}

let cirular_queue : node^[MAX_STACK]
let max_index : int = MAX_STACK - 1
let first_index : int 
let last_index : int 
let element_count : int 

fn push_to_queue(n: node^)
{
    if (element_count < MAX_STACK)
    {
        cirular_queue[last_index] = n
        last_index++
        if (last_index > max_index)
        {
            last_index = 0
        }
        element_count++
    }
}

fn pop_from_queue(): node^
{
    if (element_count <= 0)
    {
        return null
    }

    let result: node^ = cirular_queue[first_index]
    element_count--
    first_index++
    if (first_index > max_index)
    {
        first_index = 0
    }
    return result
}

fn _breadth_first()
{
    let n: node^ = pop_from_queue()
    if (n)
    {
        if (n.left)
        {
            push_to_queue(n.left)
        }
        if (n.right)
        {
            push_to_queue(n.right)
        }
    }
}

fn breadth_first_search(t: tree^)
{
    push_to_queue(t.root)
    while (element_count > 0)
    {
        _breadth_first()
    }
}

fn search_for_value(n: node^, value: int): int
{
    if (n == null)
    {
        return 0
    }
    else if (n.value == value)
    {
        return 1
    }
    else if (search_for_value(n.left, value))
    {
        return 1
    }
    else if (search_for_value(n.right, value))
    {
        return 1
    }
    else
    {
        return 0
    }
}

let max_depth: int
let current_depth: int

fn check_depth(n : node^)
{
    current_depth++
    if (n.left)
    {        
        check_depth(n.left)
    }
    if (n.right)
    {
        check_depth(n.right)        
    }
    current_depth--

    if (current_depth > max_depth)
    {
        max_depth = current_depth
    }
}

fn get_tree_depth(t: tree^): int
{
    max_depth = 0
    current_depth = 0

    check_depth(t.root)
    return max_depth
}

let max_path_sum : int
let current_path_sum : int

fn check_path_sum(n: node^)
{
    if (n == null)
    {
        return
    }

    current_path_sum += n.value
    if (n.left)
    {
        check_path_sum(n.left)
    }
    if (n.right)
    {
        check_path_sum(n.right)
    }
    
    if (n.left == null && n.right == null)    
    {
        if (current_path_sum > max_path_sum)
        {
            max_path_sum = current_path_sum
        }
    }
    current_path_sum -= n.value
}

fn get_max_path_sum(t: tree^): int
{
    max_path_sum = 0
    current_path_sum = 0

    check_path_sum(t.root)
    return max_path_sum
}

fn invert_left_right(n: node^)
{
    if (n)
    {
        let temp: node^ = n.right
        n.right = n.left
        n.left = temp

        invert_left_right(n.left)
        invert_left_right(n.right)
    }
}

fn invert_binary_tree(t: tree^)
{
    invert_left_right(t.root)
}