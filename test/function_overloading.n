extern fn assert(condition: int)
extern fn assert(condition: void*)
extern fn max(a: int, b: ulong) : ulong

fn do_something(arg : ulong) : ulong
{
	printf("something done with a unsigned long integer", 1)
	return arg * 2
}

fn do_something(arg : long) : long
{
	printf("something done with an long integer", 1)
	return arg * -2
}

fn do_something() 
{
	printf("something done", 1)
}

fn main()
{
	let var_int   : int   = -1001
	let var_long  : long  = -1002
	let var_uint  : uint  = 1003
	let var_ulong : ulong = 1004

	let var_int_result = do_something(var_int)
	assert(var_int_result == -2 * var_int)

	let var_long_result = do_something(var_long)
	assert(var_long_result == -2 * var_long)

	let var_uint_result = do_something(var_uint as ulong) // cast needed - ambiguous call, because uint can be promoted to long or ulong
	assert(var_uint_result == 2 * var_uint)

	let var_uint_result2 = do_something(var_uint as long)
	assert(var_uint_result2 == -2 * var_uint)

	let var_ulong_result = do_something(var_ulong)
	assert(var_ulong_result == var_ulong * 2)
}

