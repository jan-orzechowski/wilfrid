enum element_kind
{
    A,
    B,
    C
}

struct element
{
    kind: element_kind,
    value: int
}

enum all_ones
{
    first = 1,
    second = 1,
    third = 1,
}

enum dependent_values
{
    FIRST_VAL,
    SECOND_VAL
    THIRD_VAL = FIRST_VAL
    FOURTH_VAL = 10,
    FIFTH_VAL,
}

fn main()
{
    assert(element_kind.A == 0)
    assert(element_kind.B == 1)
    assert(element_kind.C == 2)
    
    assert(all_ones.first == 1)
    assert(all_ones.second == 1)
    assert(all_ones.third == 1)

    assert(dependent_values.FIRST_VAL == 0)
    assert(dependent_values.SECOND_VAL == 1)
    assert(dependent_values.THIRD_VAL == dependent_values.THIRD_VAL)
    assert(dependent_values.FOURTH_VAL == 10)
    assert(dependent_values.FIFTH_VAL == 11)

    let test := 1

    let data : element[15] = 
    { 
        1 =  { element_kind.A, 1  },   
        3 =  { element_kind.B, 3  },   
        5 =  { element_kind.B, 5  },   
        7 =  { element_kind.B, 7  },   
        9 =  { element_kind.A, 9  },   
        10 = { element_kind.A, 10 },   
        12 = { element_kind.B, 12 },   
    }

    for (let i := 0, i < 15, i++)
    {
        let el := &data[i]
        if (el.kind == element_kind.A)
        {
            let old_val = el.value
            el.kind = element_kind.C
            el.value *= 10
            assert(el.value == old_val * 10)
        }
    }

    assert(data[1].kind == element_kind.C)
    
    assert(data[2].kind == 2 as element_kind)
    assert(data[3].kind == element_kind.B)
    
    assert(data[0].value == 0)
    assert(data[10].value == 100)
    assert(data[7].value == 7)
    assert((data[3].value - 1) == element_kind.C as int)
}

