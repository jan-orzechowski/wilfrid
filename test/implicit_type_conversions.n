extern fn assert(condition: bool)

fn test_char_conversion(arg1: char, arg2: int) 
{
    assert(arg1 == arg2)
}

fn test_int_conversion(arg1: int, arg2: ulong) 
{
    assert(arg1 == arg2 as int)
}

fn test_long_conversion(arg1: long, arg2: char) 
{
    assert(arg1 == arg2 as long)
}

fn test_uint_conversion(arg1: uint, arg2: float) 
{
    assert(arg1 as long == arg2 as long)
}

fn main ()
{
    let char_var : char = 0
    assert(char_var == 0)

    let int_var : int = -50
    assert(int_var == -50)

    let long_var : long = -1000
    assert(long_var == -1000)

    let uint_var : uint = 10
    assert(uint_var == 10)

    let ulong_var : ulong = 120
    assert(ulong_var == 120)

    assert(char_var + char_var == 0)
    assert(int_var + -int_var == 0)
    assert(char_var + char_var == int_var + 50)
    assert(long_var + long_var == 2 * long_var)	
    assert(uint_var * -5 == int_var)

    test_char_conversion(char_var, char_var)
    test_char_conversion(char_var, 0)
    test_char_conversion(char_var, int_var + 50)
    
    test_int_conversion(int_var + 110, ulong_var / 2)
    test_int_conversion(-int_var, 50)

    test_long_conversion(long_var + 1000, char_var)
    test_long_conversion(50, 50)
}