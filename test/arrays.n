struct test
{
    val_long: long,
    val_int: int,
    val_bool: bool,
}

fn modify_20_only (arr : test^)
{
    for (let i := 0, i < 20, i++)
    {
        arr[i].val_int = 20 - i
    }
}

fn modify (arr : test^, length : int)
{
    for (let i := 0, i < length, i++)
    {
        arr[i].val_int = i
    }
}

fn modify_copy(arr : test^, length : int) : test^
{
    let copy := new test[length]
    for (let i := 0, i < length, i++)
    {
        copy[i] = arr[i]
    }

    modify(copy as test^, length)
    return copy
}

fn test_array(arr : test^, length : int)
{
    for (let i := 0, i < length, i++)
    {
        assert(arr[i].val_int == i)
    }
}

fn test_empty_array(arr : test^, length : int)
{
    for (let i := 0, i < length, i++)
    {
        assert(arr[i].val_int == 0)
    }
}

fn main()
{
    let x := new test[100]
    let y := new test[20]
    let z : test[20] = { }

    test_empty_array(x, 100)
    test_empty_array(y, 20)
    test_empty_array(@z as test^, 20)

    x[1].val_int = 6
    y[1].val_int = 6
    
    assert(x[1].val_int == y[1].val_int)
    
    modify_20_only(x)
    
    modify(x as test^, 100)    
    
    test_array(x as test^, 100)
}