CASE:const x = a + -b << c + -d + e >> f:END
TEST:(const-decl x (+ (+ (+ a (<< (- b) c)) (- d)) (>> e f))):END

CASE:let x := a ^ *b + c * -d + e | -f & g:END
TEST:(var-decl x (| (+ (+ (^ a (pointer-dereference b)) (* c (- d))) e) (& (- f) g))):END

CASE:let x := a >= b || -c * d < e && -f:END
TEST:(var-decl x (|| (>= a b) (&& (< (* (- c) d) e) (- f)))):END

CASE:let x := (&a - &b) + (*c ^ d):END
TEST:(var-decl x (+ (- (& a) (& b)) (^ (pointer-dereference c) d))):END

CASE:let x : bool = (a == -b):END
TEST:(var-decl x (type bool) (== a (- b))):END

CASE:let x: int[1 + 2] = {1, 2, 3}:END
TEST:(var-decl x (array (type int) (+ 1 2)) (compound 1 2 3)):END

CASE:fn f (a: int, b: float, c : int ) : float { return a + b }:END
TEST:(fn-decl f (a (type int)) (b (type float)) (c (type int)) (type float)
  (return (+ a b))
):END

CASE:
fn f () 
{
    x += 1
    y -= 2
    z %= 3
    return x + y - z 
}
:END
TEST:(fn-decl f
  (+= x 1)
  (-= y 2)
  (%= z 3)
  (return (- (+ x y) z))
):END

CASE:struct x { a: int, b: float, c: y }:END
TEST:(struct-decl x
  (a (type int))
  (b (type float))
  (c (type y))
):END

CASE:union some_union { a: int, b: float }:END
TEST:(union-decl some_union
  (a (type int))
  (b (type float))
):END

CASE:enum some_enum { A = 1, B, C, D = 4 }:END
TEST:(enum-decl
  (A 1)
  (B)
  (C)
  (D 4)
):END

CASE:
fn some_function() : int 
{ 
    let x = 100
    for (let i = 0, i < x, i++) { x = x + 1 } 
    return x 
}:END
TEST:(fn-decl some_function (type int)
  (var-decl x 100)
  (for (var-decl i 0) (< i x) (++ i)
    (= x (+ x 1))
  )
  (return x)
):END

CASE:let x = 2 + f(1, 2) + g(3) + 4:END
TEST:(var-decl x (+ (+ (+ 2 (f 1 2)) (g 3)) 4)):END

CASE:fn f() { 
    x *= 2 
    y |= !x 
    z &= 8 
    w /= z 
    u &&= ~y 
    v ||= z 
    a ^= b 
} :END
TEST:(fn-decl f
  (*= x 2)
  (|= y (! x))
  (&= z 8)
  (/= w z)
  (&&= u (~ y))
  (||= v z)
  (^= a b)
):END

CASE:fn f(ind: int) { x.arr[ind] = y[ind] }:END
TEST:(fn-decl f (ind (type int))
  (= (access-index ind (access-field arr x)) (access-index ind y))
):END

CASE:
fn f(): int { 
    let y = fun_1()
    let z: int = fun_2(y[0], y[y[0] + 1])
    return y * z 
}:END
TEST:(fn-decl f (type int)
  (var-decl y (fun_1 ))
  (var-decl z (type int) (fun_2 (access-index 0 y) (access-index (+ (access-index 0 y) 1) y)))
  (return (* y z))
):END

CASE:fn f() { if (*x == 1) { return y } else { return z } }:END
TEST:(fn-decl f
  (if (== (pointer-dereference x) 1)
    (return y)
    else(
      (return z)
    )
  )
):END

CASE:fn f() {if (function(x)) { return y } else if (y == 2) { return z }}:END
TEST:(fn-decl f
  (if (function x)
    (return y)
    else
      (if (== y 2)
        (return z)
      )
  )
):END

CASE:fn f() { if (x) { x = y } else if (y) {} else if (z) { z = x } else { y = z } }:END
TEST:(fn-decl f
  (if x
    (= x y)
    else
      (if y
        else
          (if z
            (= z x)
            else(
              (= y z)
            )
          )
      )
  )
):END

CASE:fn f(val: int) { if (val) { } else {

{}

} }":END
TEST:(fn-decl f (val (type int))
  (if val
  )
):END

CASE:fn f() { return sizeof(int) } }:END
TEST:(fn-decl f
  (return (sizeof (type int)))
):END

CASE:let x := sizeof(int[16]*[12]) + sizeof(int***):END
TEST:(var-decl x (+ (sizeof (array (pointer (array (type int) 16)) 12)) (sizeof (pointer (pointer (pointer (type int))))))):END

CASE:fn f() { while (x > y) { x = x + 1 } }:END
TEST:(fn-decl f
  (while (> x y)
    (= x (+ x 1))
  )
):END

CASE:fn f() { do { x[index] = x - 1 } while (x < y) }:END
TEST:(fn-decl f
  (do-while (< x y)
    (= (access-index index x) (- x 1))
  )
):END

CASE:
fn f() {
    switch (x){
        case 1: {let x: int = 1 return x } break
        default: { return 2 } break 
    } 
}:END
TEST:(fn-decl f
  (switch x
    (case 1
      (var-decl x (type int) 1)
      (return x)
    )
    (case  default
      (return 2)
    )
  )
):END

CASE:
fn f() {
    switch (x) {
        case 1: case 2: { y++ } case 3: case 4: case 5: { y-- }
        case 6: { return 2 } case 7: {} 
    } 
}:END
TEST:(fn-decl f
  (switch x
    (case 1 2 fallthrough
      (++ y)
    )
    (case 3 4 5 fallthrough
      (-- y)
    )
    (case 6 fallthrough
      (return 2)
    )
    (case 7 fallthrough
    )
  )
):END

CASE:fn f(x: int*, y: int[25], z: char*[25], w: int**[20] ) : int** { let x : int[256] = 0 } :END
TEST:(fn-decl f (x (pointer (type int))) (y (array (type int) 25)) (z (array (pointer (type char)) 25)) (w (array (pointer (pointer (type int))) 20)) (pointer (pointer (type int)))
  (var-decl x (array (type int) 256) 0)
):END

CASE:struct x { a: int[20], b: float**, c: int*[20]* } :END
TEST:(struct-decl x
  (a (array (type int) 20))
  (b (pointer (pointer (type float))))
  (c (pointer (array (pointer (type int)) 20)))
):END

CASE:let x = y == z ? *y : 20:END
TEST:(var-decl x (? (== y z)
  (pointer-dereference y)
  20
)):END

CASE:fn fc(x: some_struct*) : other_struct { x.member = {1, 2} let y = func(12, a, {2, 3, x, x.member}) return y }:END
TEST:(fn-decl fc (x (pointer (type some_struct))) (type other_struct)
  (= (access-field member x) (compound 1 2))
  (var-decl y (func 12 a (compound 2 3 x (access-field member x))))
  (return y)
):END

CASE:fn f() { x.y = {z = 2, w = 3, p = 44, q = z, 22} }:END
TEST:(fn-decl f
  (= (access-field y x) (compound (z 2) (w 3) (p 44) (q z) 22))
):END

CASE:let x: int[4] = {1, 2, 3, 4}:END
TEST:(var-decl x (array (type int) 4) (compound 1 2 3 4)):END

CASE:let x = {1, 2, 3} as v3:END
TEST:(var-decl x (compound (type v3) 1 2 3)):END

CASE:let y = f(1, {1, 2}, {1,2} as v2):END
TEST:(var-decl y (f 1 (compound 1 2) (compound (type v2) 1 2))):END

CASE:fn f(x: int, y: int) : vec2 { return {x + 1, y - 1} as vec2 }:END
TEST:(fn-decl f (x (type int)) (y (type int)) (type vec2)
  (return (compound (type vec2) (+ x 1) (- y 1)))
):END

CASE:let x := 12 as string:END
TEST:(var-decl x (cast (type string) 12)):END

CASE:let x := (12 + 1 / z as float) as float:END
TEST:(var-decl x (cast (type float) (+ 12 (/ 1 (cast (type float) z))))):END

CASE:let x := var1 as bool && var2 as bool || (var3 as uint & var4 as uint) as bool:END
TEST:(var-decl x (|| (&& (cast (type bool) var1) (cast (type bool) var2)) (cast (type bool) (& (cast (type uint) var3) (cast (type uint) var4))))):END

CASE:fn f1 (x : int[16]*) { f2(&map as int, i as void*, (i + 1) as void*, x as int[8]*) }:END
TEST:(fn-decl f1 (x (pointer (array (type int) 16)))
  (f2 (cast (type int) (& map)) (cast (pointer (type void)) i) (cast (pointer (type void)) (+ i 1)) (cast (pointer (array (type int) 8)) x))
):END

CASE:fn f() { delete x }:END
TEST:(fn-decl f
  (delete x)
):END

CASE:let x : node* = null:END
TEST:(var-decl x (pointer (type node)) null):END

CASE:fn f(x: node*): bool { if (x == null) { return true } else { return false } }:END
TEST:(fn-decl f (x (pointer (type node))) (type bool)
  (if (== x null)
    (return true)
    else(
      (return false)
    )
  )
):END

CASE:let x := new int[]:END
TEST:(var-decl x (new (list (type int)))):END

CASE:let x : string[] = auto string[]:END
TEST:(var-decl x (list (type string)) (auto (list (type string)))):END

CASE:let x : int[12][] = new int[12][]:END
TEST:(var-decl x (list (array (type int) 12)) (new (list (array (type int) 12)))):END

CASE:fn (s: some_struct) method (i: int) { s.x += i } :END
TEST:(fn-decl method (receiver (s (type some_struct))) (i (type int))
  (+= (access-field x s) i)
):END

CASE:fn (this: int[16]*[12]) method () {  } :END
TEST:(fn-decl method (receiver (this (array (pointer (array (type int) 16)) 12)))
):END

CASE:fn (x: some_struct*) method () : some_struct* { return x } :END
TEST:(fn-decl method (receiver (x (pointer (type some_struct)))) (pointer (type some_struct))
  (return x)
):END

CASE:let x := some_var.method() :END
TEST:(var-decl x (method (receiver some_var) )):END

CASE:let x := (*some_var_ptr).method(1, 2, 3):END
TEST:(var-decl x (method (receiver (pointer-dereference some_var_ptr)) 1 2 3)):END

CASE:let x := some_array[12].method(*other_var):END
TEST:(var-decl x (method (receiver (access-index 12 some_array)) (pointer-dereference other_var))):END

CASE:let x := one_object.other_object.method(one_object):END
TEST:(var-decl x (method (receiver (access-field other_object one_object)) one_object)):END

CASE:let x := one_object.other_object.one_other_object.method():END
TEST:(var-decl x (method (receiver (access-field one_other_object (access-field other_object one_object))) )):END

CASE:let chain := some_object.method().other_method().yet_other_method():END
TEST:(var-decl chain (yet_other_method (receiver (other_method (receiver (method (receiver some_object) )) )) )):END

CASE:extern fn strlen(str: char*) : int:END
TEST:(fn-decl extern strlen (str (pointer (type char))) (type int)):END

CASE:extern fn printf(str: char*, variadic) : int:END
TEST:(fn-decl extern printf (str (pointer (type char))) (variadic ) (type int)):END

CASE:
fn /* comment /* other comment /* other comment */ */ newline
*/ x /* comment */(i:int) :int { return i }
:END
TEST:(fn-decl x (i (type int)) (type int)
  (return i)
):END

CASE:let x = new X(1 ,2):END
TEST:(var-decl x ((new (type X)) 1 2)):END

CASE:let x = new X(new y(), new z()):END
TEST:(var-decl x ((new (type X)) (new (type y)) (new (type z)))):END

CASE:let x = new memory(1000):END
TEST:(var-decl x ((new (type memory)) 1000)):END

CASE:let x = auto memory(100):END
TEST:(var-decl x ((auto (type memory)) 100)):END

CASE:fn push_node(n: node *) { *last_node = *n } } :END
TEST:(fn-decl push_node (n (pointer (type node)))
  (= (pointer-dereference last_node) (pointer-dereference n))
):END

CASE:let x := 0xff51afd:END
TEST:(var-decl x 267721469):END

CASE:let x := '\n':END
TEST:(var-decl x '\n'):END  

CASE:let f := 0.0:END
TEST:(var-decl f 0.000000f):END

CASE:let f := 0.000123:END
TEST:(var-decl f 0.000123f):END

CASE:let f := 0.000456 + 0.2 + 3542.123291 :END
TEST:(var-decl f (+ (+ 0.000456f 0.200000f) 3542.123291f)):END

CASE:fn f() 
{
    let arr : int[20] = { 1, 2, 3 = 4, 4 = 3, 5 }
}:END
TEST:(fn-decl f
  (var-decl arr (array (type int) 20) (compound 1 2 (index 3 4) (index 4 3) 5))
):END


